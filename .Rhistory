reset()
swirl()
submit()
library(swirl)
swirl()
?Devices
with(faithful , plot(eruptions,waiting))
title(main="Old Faithful Geyser data")
dev.cur()
getwd()
pdf(file="myplot.pdf")
with(faithful , plot(eruptions,waiting))
title(main="Old Faithful Geyser data")
dev.cur()
dev.off()
dev.cur()
with(faithful,plot(eruptions, waiting))
title(main = "Old Faithful Geyser data")
dev.copy(png, file="geyserplot.png")
dev.off()
head(cars)
with(cars,plot(speed,dist))
with(cars, plot(speed, dist))
text(mean(cars$speed), max(cars$dist), "SWIRL rules!")
head(state)
table(state$region)
xyplot(Life.Exp ~ Income | region , data=state , c(4,1))
xyplot(Life.Exp ~ Income | region , data=state , layout=c(4,1))
xyplot(Life.Exp ~ Income | region , data=state , layout=c(2,2))
head(mpg)
dim(mpg)
table(mpg$model)
qplot(displ,hwy,data=mpg)
head(airquality)
range(airquality$Ozone , na.rm = TRUE)
hist(airquality$Ozone)
table(airquality$Month)
boxplot(Ozone~Month , data = airquality)
boxplot(Ozone~Month , data = airquality , xlab="Month" , ylab="Ozone (ppb)" , col.axis ="blue" , col.lab = "red")
boxplot(Ozone~Month , data = airquality , xlab="Month" , ylab="Ozone (ppb)" , col.axis ="blue" , col.lab = "red" , main="ozone and Wind in New York City")
title(main="Ozone and Wind in New York City")
with(airquality,plot(wind , ozone))
with(airquality,plot(Wind , Ozone))
title(main="Ozone and Win in New York City")
title(main="Ozone and Wind in New York City")
length(par())
names(par())
library(swir)
library(swirl)
swirl()
par()$pin
par("fg")
par("pch")
par("lty")
plot(airquality$Wind,airquality$Ozone,set="n")
plot(airquality$Wind,,set="n",airquality$Ozone)
warning()
plot(airquality$Wind, type="n",airquality$Ozone)
title(main="Wind and Ozone in NYC")
may <- airquality$Month[5]
may <- subset(airquality , Month ==5)
plot(airquality$Wind,airquality$Ozone,col="blue",pch=4)
points(may$Wind,may$Ozone,col="blue",pch=17)
notmay <- subset(airquality , Month!=5)
plot(notmay , airquality$Ozone, pch=19)
points(notmay$Wind,notmay$Ozone,col="red",pch=8)
legend("topright",c((17,8) ,("blue" , "red") , ("May", "Other Months"))
legend("topright", pch = c(17, 8), col = c("blue", "red"), legend = c("May", "Other Months"))
abline(lty=2)
abline(v=median(airquality$Wind),lty=2,lwd=2).
abline(v=median(airquality$Wind),lty=2,lwd=2)
par(mfrow=c(1,2))
plot(airquality$Wind,airquality$Ozone)
plot(airquality$Wind,airquality$Ozone , main= "Ozone and Wind")
plot(airquality$Ozone,airquality$Solar , main= "Ozone and Wind")
plot(airquality$Ozone,airquality$Solar , main= "Ozone and Radiation")
plot(airquality$Ozone, airquality$Solar.R, main = "Ozone and Solar Radiation")
par(mfrow = c(1, 3), mar =c(4, 4, 2, 1), oma = c(0, 0, 2, 0))
plot(airquality$Wind,airquality$Ozone,main="Ozone and Wind")
plot(airquality$Solar.R,airquality$Ozone,main="Ozone and Radiation")
plot(airquality$Solar.R, airquality$Ozone, main = "Ozone and
| Solar Radiation")
plot(airquality$Solar.R, airquality$Ozone, main = "Ozone and
Solar Radiation")
plot(airquality$Solar.R, airquality$Ozone, main = "Ozone and Solar Radiation")
plot(airquality$Temp, airquality$Ozone, main = "Ozone and Solar Temperature")
plot(airquality$Temp, airquality$Ozone, main = "Ozone and Temperature")
mtext(Ozone and Weather in New York City" , set=TRUE)
mtext("Ozone and Weather in New York City" , set=TRUE)
mtext("Ozone and Weather in New York City" , outer=TRUE)
library(swirl)
swirl()
head(airquality)
xyplot(Ozone~wind , data=airquality)
xyplot(Ozone~Wind , data=airquality)
xyplot(Ozone~Wind , data=airquality , col="red" , pch=8 , main="Big Apple Data")
xyplot(Ozone ~ Wind, data = airquality, pch=8, col="red",main="Big Apple Data")
xyplot(Ozone ~ Wind | as.factor(Month), data = airquality, layout=c(5,1))
xyplot(Ozone ~ Wind | Month, data = airquality, layout=c(5,1))
p <- xyplot(Ozone~Wind,data=airquality)
print(p)
names(p)
mynames[myfull]
p[["formula"]]
p[["x.limits"]]
table(f)
xyplot(y~x|f , layout=c(2,1))
v1
v2
myedit("plot1.R")
source("plot.R" , local=TRUE)
file("plot1.R", local=TRUE)
pathtofile("plot1.R", local=TRUE)
pathtofile("plot1.R", localeToCharset=TRUE
)
pathtofile("plot1.R", set=TRUE)
pathtofile("plot1.R", local(TRUE))
pathtofile("plot1.R"
)
source(pathtofile("plot1.R"),local=TRUE)
myedit("plot2.R")
source(pathtofile("plot2.R") , local=TRUE)
str(diamonds)
table(diamonds$color)
table(diamonds$color , diamonds$cut)
myedit("myLabels,R")
myedit("myLabels.R")
source(pathtofile("myLabels.R") , local=TRUE)
xyplot(price~carat | color * cut , data = diamonds , strip = FALSE , pch = 20 , xlab = myxlab , ylab = myylab , main = mymain )
xyplot(price~carat | color * cut , data = diamonds , pch = 20 , xlab = myxlab , ylab = myylab , main = mymain )
sample(colors , 10)
sample(colors() , 10)
pal <- colorRamp(c("red","blue"))
pal
pal(0)
pal(1)
pal(seq(0,1,len=6))
p1 <- colorRamp(c("red" , "blue"))
p1 <- colorRampPalette(c("red" , "blue"))
p1(2)
p1(6)
p1(0xcc)
0xcc
p2 <- colorRampPalette(c("red" , "yellow"))
p2(2)
p2(10)
showme(p1(20))
showMe(p1(20))
showMe(p2(20))
showMe(p2(2))
p1
?fun
?rgb
p3 <- colorRampPalette("red" , "blue" , "green" , alpha=.5)
p3 <- colorRampPalette(0,1,1,.5)
p3 <- colorRampPalette("red" , "blue" , "green" , alpha=.5)
?colorRampPalette
p3 <- colorRampPalette("red" , "blue" , "green" , alpha=FALSE)
p3 <- colorRampPalette(rgb , alpha=FALSE)
p3 <- colorRampPalette(c("blue" , "green") , alpha=FALSE)
p3 <- colorRampPalette(c("blue","green"),alpha=.5)
p3(5)
plot(x,y,pch=19,col=rgb(0,0.5,0.5))
plot(x,y,pch=19,col=rgb(0,0.5,0.5,.3))
cols <- brewer.pal(3,"BuGn")
showMe(cols)
pal <- colorRampPalette(cols)
showMe(pal(20))
image(volcano , col=pal(20))
image(volcano , col=1(20))
image(volcano , col=p1(20))
str(mpg)
qplot(displ,hwy,data=mpg)
qplot(displ,hwy,data=mpg,color=drv)
qplot(displ,hwy,data=mpg,color=drv,geom=c("point","smooth"))
qplot(hwy,data=mpg,color=drv)
qplot(y=hwy, data = mpg, color = drv)
myhigh
qplot(drv,hwy,data=mpg,geom=("boxplot"))
qplot(drv,hwy,data=mpg,geom="boxplot")
qplot(drv,hwy,data=mpg,geom="boxplot",color="manufacturer")
qplot(drv,hwy,data=mpg,geom="boxplot",color=manufacturer)
qplot(hwy,data=mpg,fill=drv)
qplot(displ,hwy,data=mpg,facets = .~drv)
library(swirl)
swirl()
qplot(hwy,data=mpg,facets =drv~.,binwidth=2)
qplot(displ.hwy,data=mgg,geom=c("point","smooth"),facets = .~drv)
qplot(displ.hwy,data=mpg,geom=c("point","smooth"),facets = .~drv)
qplot(displ,hwy,data=mpg,geom=c("point","smooth"),facets = .~drv)
g <- ggplot(data=mpg,displ,hwy)
g <- ggplot(mpg,displ,hwy)
g <- ggplot(data=mpg,displ,hwy)
g <- ggplot(data=mpg,hwy)
g <- ggplot(displ,hwy,data=mpg)
?ggplot
g <- ggplot(mpg,aes(displ,hwy))
summary(g)
g+geom_point()
g+geom_point()+geom_smooth()
g+geom_point()+geom_smooth(method = "lm")
g+geom_point()+geom_smooth(method = "lm")+facet_grid(.~drv)
g+geom_point()+geom_smooth(method = "lm")+facet_grid(.~drv)+ggtitle("Swirl Rules!")
g+geom_point(color="pink",size=4,alpha=1/2)+geom_smooth(method = "lm")+facet_grid(.~drv)
g+geom_point(color="pink",size=4,alpha=1/2)
g+geom_point(size=4,alpha=1/2,aes(drv))
g+geom_point(size=4,alpha=1/2,aes(colors=drv))
g + geom_point(aes(color = drv), size = 4, alpha = 1/2)
g + geom_point(aes(color = drv), labs(title = "Swirl Rules!") labs(x="Displacement",y="Hwy Mileage"))
g + geom_point(aes(color = drv), labs(title = "Swirl Rules!") ,labs(x="Displacement",y="Hwy Mileage"))
g + geom_point(aes(color = drv), labs(title = "Swirl Rules!",x="Displacement",y="Hwy Mileage"))
g + geom_point(aes(color = drv), labs(title = "Swirl Rules!") , labs(x="Displacement",y="Hwy Mileage"))
?geom_point
g + geom_point(color = drv, labs(title = "Swirl Rules!") , labs(x="Displacement",y="Hwy Mileage"))
g + geom_point(aes(color = drv), labs(title = "Swirl Rules!") , labs(x="Displacement",y="Hwy Mileage"))
library(swirl)
swirl()
dist(dataFrame)
hc <- hclust(distxy)
plot(hc)
plot(as.dendrogram(hc))
abline(col="blue" , h=1.5)
abline(col="red" , h=.4)
7
8
5
abline(col="red" , h=.05)
12
abline(col="green" , h=.05)
dist(dFsm)
hc
heatmap(dataMatrix,col=cm.colors(25))
heatmap(mt)
mt
plot(denmt)
distmt
cmat
points(cx,cy,col=c("red","orange","purple"),pch=3,cex=2,lwd=2)
mdist(x,y,cx,xy)
mdist(x,y,cx,cy)
apply(distTmp,2,which.min(distTmp))
apply(distTmp,2,which.min
)
points(x,y,pch=19,cex=2,col=cols[newClust])
points(x,y,pch=19,cex=2,col=cols1[newClust])
tapply(x,newClust,mean)
tapply(y,newClust,mean)
points(col=cols1,pch=8,cex=2)
points(x,y,col=cols1,pch=8,cex=2)
points(newCx,newCy,col=cols1,pch=8,cex=2,lwd=2)
mdist(x,y,newCx,newCy)
apply(disTmp,2,which.min)
apply(disTmp2,2,which.min)
apply(distTmp2,2,which.min)
points(x,ypch=19,cex=2,col=cols1[newClust2])
points(x,y,pch=19,cex=2,col=cols1[newClust2])
tapply(x,newClust2,mean)
tapply(y,newClust2,mean)
points(finalCx,finalCy,col=cols1,pch=9,cex=2,lwd=2)
kmeans(dataFrame,centers=3)
kmObj$iter
plot(x,y,col=kmObj$cluster,pch=19,cex=2)
points(kmObj$centers,col=c("black","red","green"),pch=3,cex=3,lwd=3)
kmeans(x,y,col=kmeans(dataFrame,6)$cluster),pch=19,cex=2)
skip()
kmeans(x,y,col=kmeans(dataFrame,6)$cluster,pch=19,cex=2)
skip()
plot(x,y,col=kmeans(dataFrame,6)$cluster,pch=19,cex=2)
library(swirl)
swirl()
head(dataMatrix)
heatmap(dataMatrix)
myedit("addpatt.R")
myedit("addPatt.R")
source("addpatt.R",local=TRUE)
source("addPatt.R", local=TRUE)
heatmap(dataMatrix)
mat
svd(mat)
skip()
svd(scale(mat)
)
prcomp(scale(mat))
svd1$v[,1]
svd1$d
head(constantMatrix)
svd2(d)
skip()
head(svd2$d,2)
svd2$v[,1:2]
svd2
svd2$d
dim(faceData)
skip()
myImage(a1)
skip()
myImage(a2)
skip()
myImage(svd1$u[,1:5] %*%  diag(svd1$d[1:5])  %*% t(svd1$v[,5:10]))
skip()
dim(ssd)
names(ssd,[,2])
names(ssd)
names(ssd[562:563])
table(ssd$subject)
sum(ssd$subject)
sum(table(ssd$subject))
table(ssd$activity)
sub1 <- subset(ssd,boolean=1)
sub1 <- subset(ssd , subject == 1)
dim(sub1)
names(sub1[1:12])
myedit("showXY.R")
showMe(1:6)
mdist <- dist(sub1[,1:3])
hclust(mdist)
hclustering <- hclust(mdist)
myplclust(hclustering,lab.col=unlcass(sub1$activity))
myplclust(hclustering+lab.col=unlcass(sub1$activity))
myplclust(hclustering , lab.col=unlcass(sub1$activity))
skip()
mdist <- dist(sub1[,10:12])
hclustering <- hclust(mdist)
myplclust(hclustering , lab.col = unclass(sub1$activity))
svd1 <- svd(scale(sub1[,-c(562,562)]))
svd1 <- svd(scale(sub1[,-c(562,562)]))
skip
svd1 <- svd(scale(sub1[,-c(562,563)]))
svd1$u
dim(svd1$u)
maxCon <- which.max(svd1$v)
maxCon <- which.max(svd1$v[,2])
mdist <- dist(sub1[10:12],maxCon)
mdist <- dist(sub1[,10:12],maxCon)
mdist <- dist(sub1([,10:12]),maxCon)
skip
mdist <- dist(sub1[,c(10:12,maxCon)])
hclustering <- hclust(mdist)
myplclust(hclustering , lab.col = unclass(sub1$activity))
names(sub1[maxCon])
kClust <- kmeans(sub1(-c[],centers=6))
kClust <- kmeans(sub1(-c[]),centers=6)
kClust <- kmeans(sub1[-c(562:563),centers=6)
kClust <- kmeans(sub1[-c(562:563)],centers=6)
kClust <- kmeans(sub1[ , -c(562,563)],centers=6)
table(kClust$cluster , sub1$activity)
kClust <- kmeans(sub1[ , -c(562,563)],centers=6 ,nstart = 100)
table(kClust$cluster , sub1$activity)
dim(x$y)
dim(kClust$centers)
laying <- kClust%size == 29
laying <- kClust$size == 29
laying <- which(kClust$size == 29)
plot(kClust$centers[laying,1:12],pch=19 , ylab="Layong Cluster")
plot(kClust$centers[laying, 1:12],pch=19,ylab="Laying Cluster")
names(sub1[1:3])
walkdown <- which(kClust$size==49)
plot(kClust$centers[walkdown,1:12],pch=19,ylab = "Walkdown Cluster")
library(swirl)
swirl()
dim(pm0)
head(pm0)
names(cnames)
print(cnames)
cnames <- strsplit(cnames , "|" , TRUE)
print(cnames)
names(pm0) <- make.names(cnames[[1]][wcol])
head(pm0)
x0 <- pm0$Sample.Value
str(x0)
mean(is.na(x0))
names(pm1) <- make.names(cnames[[1]][wcol])
dim(pm1)
x1 <- pm1$Sample.Value
mean(is.na(x1))
summary(x0)
summary(x1)
boxplot(x0 , x1)
boxplot(log10(x0) , log10(x1))
x1<0
negative <- x1 < 0
sum(negative , na.rm = TRUE)
mean(negative , na.rm = TRUE)
dates <- pm1$Date
str(date)
str(dates)
dates <- as.Date(as.character(dates) , "%Y%m%d")
head(dates)
hist(dates[negative] , "month")
str(site0)
both <- intersect(site0 , site1)
both
head(pm0)
cnt0 <- subset(pm0 ,State.Code == 36 & County.Site ==2)
cnt0 <- subset(pm0 ,State.Code == 36 & sounty.site ==2)
cnt0 <- subset(pm0 ,State.Code == 36 & county.site ==2)
cnt0 <- subset(pm0 ,State.Code == 36 & county.site %in% both)
cnt1 <- subset(pm1 ,State.Code == 36 & county.site %in% both)
sapply(split(cnt0 , cnt0$county.site),nrow)
sapply(split(cnt1 , cnt0$county.site),nrow)
sapply(split(cnt1 , cnt1$county.site),nrow)
pmosub <- subset(cn0 , COunty.Code==63 & Site.ID==2008)
pmosub <- subset(cnt0 , COunty.Code==63 & Site.ID==2008)
pmosub <- subset(cnt0 , County.Code==63 & Site.ID==2008)
pm0sub <- subset(cnt0, County.Code==63 & Site.ID==2008)
pm1sub <- subset(cnt1, County.Code==63 & Site.ID==2008)
x0sub <- pm0sub$Sample.Value
x1sub <- pm1sub$Sample.Value
dates0 <- as.Date(as.character(pm-sub$Date) , "%Y%d%m")
dates0 <- as.Date(as.character(pm0sub$Date) , "%Y%d%m")
dates0 <- as.Date(as.character(pm0sub$Date),"%Y%m%d")
dates1 <- as.Date(as.character(pm1sub$Date),"%Y%m%d")
par(mfrow=c(1,2) , mar=c(4,4,2,1))
plot(dates0 , x0sub, pch=20)
abline(median(x0sub),lwd=2,na.rm=TRUE)
abline(h=median(x0sub),lwd=2,na.rm=TRUE)
abline(h = median(x0sub, na.rm = TRUE),lwd=2)
abline(h = median(x0sub, na.rm = TRUE),lwd=2)
plot(dates1, x1sub, pch = 20)
abline(h = median(x1sub, na.rm = TRUE),lwd=2)
eng <- range(x0sub , x1sub , na.rm = TRUE)
rng <- range(x0sub , x1sub , na.rm = TRUE)
rng
mn0 <- woth(pm0 ,tapply(Sample.Value,State.Code , mean(Sample.Value),na.rm=TRUE))
mn0 <- with(pm0 ,tapply(Sample.Value,State.Code , mean(Sample.Value),na.rm=TRUE))
skip()
str(mn0)
mn1 <- woth(pm1 ,tapply(Sample.Value,State.Code , mean(Sample.Value),na.rm=TRUE))
mn1 <- with(pm1 ,tapply(Sample.Value,State.Code , mean,na.rm=TRUE))
str(mn1)
summary(mn0)
summary(mn1)
d0 <- data.frame(state=names(mn0),mean=mn0)
d1 <- data.frame(state=names(mn1),mean=mn1)
mrg <- merge(d0 , d1 , "state")
dim(meg)
dim(mrg)
head(d1)
head(mrg)
skip()
skip()
skip()
mrg[mrg$mean.x < mrg$mean.y, ]
setwd("C:/Users/Ajith/OneDrive/Desktop/GitHub/RepData_PeerAssessment1")
activityData <- read.csv("activity.csv")
getwd()
setwd("C:/Sam/R/activity")
activityData <- read.csv("activity.csv")
summary(activityData)
head(activityData)
activityData <- read.csv("activity.csv")
activityData <- read.csv("activity.csv")
setwd("C:/Sam/R/activity")
activityData <- read.csv("activity.csv")
summary(activityData)
names(activityData)
head(activityData)
stepsPerDay <- aggregate(steps ~ date, activityData, sum,                       na.rm=TRUE)
activityData <- read.csv("activity.csv")
setwd("C:Users/Ajith/OneDrive/Desktop/GitHub/RepData_PeerAssessment1")
setwd("C:Users\Ajith\OneDrive\Desktop\GitHub\RepData_PeerAssessment1")
setwd("C:Users\Ajith\OneDrive\Desktop\GitHub\RepData_PeerAssessment1")
setwd("C:/Users/Ajith/OneDrive/Desktop/GitHub/RepData_PeerAssessment1")
unzip("./activity.zip")
activityData <- read.csv("./activity.csv")
summary(activityData)
names(activityData)
head(activityData)
stepsPerDay <- aggregate(steps ~ date, activityData, sum,                       na.rm=TRUE)
meanStepsPerDay <- mean(stepsPerDay$steps)
meanStepsPerDay
hist(stepsPerDay$steps)
stepsPerDay <- aggregate(steps ~ date, activityData, sum,                       na.rm=TRUE)
medianStepsPerDay <- median(stepsPerDay$steps)
medianStepsPerDay
stepsPerInterval<-aggregate(steps~interval, data=activityData,                       mean, na.rm=TRUE)
plot(steps~interval, data=stepsPerInterval, type="l")
View(stepsPerInterval)
intervalWithMaxNbSteps<-stepsPerInterval[which.max
(stepsPerInterval$steps),]$interval
intervalWithMaxNbSteps
totalValuesMissings <- sum(is.na(activityData$steps))
totalValuesMissings
getMeanStepsPerInterval<-function(interval){
stepsPerInterval[stepsPerInterval$interval==interval,]$steps}
activityDataNoNA<-activityData
for(i in 1:nrow(activityDataNoNA)){
if(is.na(activityDataNoNA[i,]$steps)){
activityDataNoNA[i,]$steps <-              getMeanStepsPerInterval(activityDataNoNA[i,]$interval)
}
}
totalStepsPerDayNoNA <- aggregate(steps ~ date,  data=activityDataNoNA, sum)
hist(totalStepsPerDayNoNA$steps)
names(stepsByDay) <- c("interval", "day", "steps")
activityDataNoNA$date <- as.Date(strptime(activityDataNoNA$date, format="%Y-%m-%d"))
activityDataNoNA$day <- weekdays(activityDataNoNA$date)
for (i in 1:nrow(activityDataNoNA)) {
if (activityDataNoNA[i,]$day %in% c("Saturday","Sunday")) {
activityDataNoNA[i,]$day<-"weekend"
}
else{
activityDataNoNA[i,]$day<-"weekday"
}
}
stepsByDay <- aggregate(activityDataNoNA$steps ~ activityDataNoNA$interval + activityDataNoNA$day, activityDataNoNA, mean)
meanStepsPerDayNoNA <- mean(totalStepsPerDayNoNA$steps)
medianStepsPerDayNoNA <- median(totalStepsPerDayNoNA$steps)
names(stepsByDay) <- c("interval", "day", "steps")
library(lattice)
xyplot(steps ~ interval | day, stepsByDay, type = "l", layout = c(1, 2),
xlab = "Interval", ylab = "Number of steps")
stepsPerDay <- aggregate(steps ~ date, activityData, sum,na.rm=TRUE)
